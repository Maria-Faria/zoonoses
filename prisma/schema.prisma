generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id                             Int        @id @default(autoincrement())
  state                          String     @db.VarChar
  city                           String     @db.VarChar
  neighborhood                   String     @db.VarChar
  road                           String     @db.VarChar
  number                         String     @db.VarChar
  hospital                       hospital[]
  tutors_tutors_addressToaddress tutors[]   @relation("tutors_addressToaddress")
}

model pets {
  public_id  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocol   Int        @default(autoincrement())
  age        Int?
  size_pet   size
  input_date DateTime   @db.Date
  specie     String     @db.VarChar
  breed      String?    @db.VarChar
  color      String     @db.VarChar
  weight     Float
  pet_gender gender
  plate      Int?
  microchip  String?    @db.VarChar
  id_tutor   String?    @db.Uuid
  input_type input_type
  tutors     tutors?    @relation(fields: [id_tutor], references: [public_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tutor")

  records records[]
}

model tutors {
  public_id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cpf                             String   @unique @db.VarChar
  name                            String   @db.VarChar
  phones                          String[]
  address                         Int
  pets                            pets[]
  address_tutors_addressToaddress address  @relation("tutors_addressToaddress", fields: [address], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_address")

  records records[]
}

model users {
  public_id  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_code  String      @unique @db.VarChar
  name       String      @db.VarChar
  email      String      @unique @db.VarChar
  admin      Boolean?    @default(false)
  password   String      @db.VarChar
  userTokens userTokens?
}

model userTokens {
  public_id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String @unique @db.Uuid
  refreshToken String @unique @db.VarChar
  user         users  @relation(fields: [user_id], references: [public_id])
}

model userResetPassword {
  public_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String @unique @db.VarChar
  code      String @unique @db.VarChar
}

model services {
  public_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      String @unique @db.VarChar
  price     Float

  records records[]
}

model hospital {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar
  phone      String  @db.VarChar
  address_id Int
  address    address @relation(fields: [address_id], references: [id])
}

model records {
id         Int     @id @default(autoincrement())
pet_id     String  @db.Uuid
tutor_id   String  @db.Uuid
service_id String  @db.Uuid
date       DateTime @db.Date  @default(now())

pets       pets    @relation(fields: [pet_id], references: [public_id])
tutors     tutors  @relation(fields: [tutor_id], references: [public_id])
services   services@relation(fields: [service_id], references: [public_id])
}

enum gender {
  f_mea @map("fêmea")
  macho
}

enum size {
  pequeno
  m_dio   @map("médio")
  grande
}

enum input_type {
  recolhido
  entregue
  abandonado
}

enum specie {
  canino
  felino
  ave
  outros
}
